#!/bin/bash

# We expect the following arguments:
# $1 path to .app file
# $2 developer Apple ID email
# $3 developer team ID
# $4 app-specific password (for notarisation)

if [ $# -ne 4 ]
then
    printf "Fatal: received arguments are invalid\n\nUsage:\n  ./sign.sh [path to .app file to sign] [Apple ID email] [Apple Developer team ID] [app-specific password]\n\nNote: check that all spaces are escaped with '\\\\' in the app path\nNote: the app-specific password must be generated by the Apple ID used for signing at https://account.apple.com/account/manage\nNote: use the following command to show Apple codesigning IDs\n  $ security find-identity -v -p codesigning\n"
    exit 1
fi

# We can use this for absolute paths
function get_abs_path() {
    echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

# Bind arguments provided by the user
FILE_PATH=$(get_abs_path "$1")
DEV_EMAIL="$2"
DEV_TEAM_ID="$3"
APP_PASSWORD="$4"

printf "Attempting to sign $FILE_PATH now...\n\n"

# Find the Developer ID Application ID for signing
SIGNING_ID=$(security find-identity -v -p codesigning | grep "Developer\ ID\ Application" | tail -n 1 | cut -c 6-45)

# Sign the application and enabled hardened runtime
codesign --verbose --deep --force --timestamp --options=runtime --sign $SIGNING_ID "$FILE_PATH"

if [ $? -ne 0 ]
then
    printf "\nFailed to sign the application: see above for more details\n"
    exit 1
fi

echo

printf "\nSigning successful, temporarily zipping the application before notarisation...\n"

# Zip the .app file for notarisation
zip -r -1 notary_build.zip "$FILE_PATH" > /dev/null

echo

printf "\nApplication zipped, running the notarisation now...\n"

# Notarise the .zip file
xcrun notarytool submit notary_build.zip --wait --apple-id $DEV_EMAIL --team-id $DEV_TEAM_ID --password $APP_PASSWORD

NOTARISATION_STATUS=$?

# Remove the zip file after notarising, regardless of whether it succeeded
rm -rf notary_build.zip

if [ $NOTARISATION_STATUS -ne 0 ]
then
    printf "\nApp notarisation failed: see above for more details\n"
    exit 1
fi

printf "\nNotarisation succeeded, stapling the app now...\n"

# Staple the application
xcrun stapler staple "$FILE_PATH"

if [ $? -ne 0 ]
then
    printf "\nStapling the application failed: see above for more details\n"
    exit 1
fi

printf "\nStapling suceeded, running final verification...\n"

# Verify that everything has been signed & notarised
spctl -vvv --assess --type exec "$FILE_PATH"

if [ $? -eq 0 ]
then
    printf "\nSigning and notarising finished successfully\n"
    exit 0
else
    printf "\nFinal assessment step failed: see above for details\n"
    exit 1
fi
